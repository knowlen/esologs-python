name: CI/CD Pipeline

on:
  # Run on PR creation and updates, but with conditions to reduce waste
  pull_request:
    types: [opened, synchronize]
    branches: [ main, v2-dev, dev ]
  # Allow manual triggering from GitHub UI
  workflow_dispatch:
    inputs:
      run_integration_tests:
        description: 'Run integration tests'
        required: false
        default: 'true'
        type: boolean
  # Still run on pushes to main/v2-dev/dev (for releases)
  push:
    branches: [ main, v2-dev, dev ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Verify installation
      run: |
        pip list
        python -c "import esologs; print('Package imported successfully')"

    - name: Run pre-commit checks
      run: |
        pre-commit run --all-files

    - name: Run unit tests
      run: |
        echo "Starting unit tests..."
        pytest tests/unit/ -v --cov=esologs --cov-report=xml --cov-report=term

    - name: Check secrets availability
      env:
        ESOLOGS_ID: ${{ secrets.ESOLOGS_ID }}
        ESOLOGS_SECRET: ${{ secrets.ESOLOGS_SECRET }}
      run: |
        if [ -z "$ESOLOGS_ID" ]; then
          echo "WARNING: ESOLOGS_ID secret not set"
        else
          echo "ESOLOGS_ID secret is available"
        fi
        if [ -z "$ESOLOGS_SECRET" ]; then
          echo "WARNING: ESOLOGS_SECRET secret not set"
        else
          echo "ESOLOGS_SECRET secret is available"
        fi

    - name: Run integration tests
      if: (github.event_name != 'workflow_dispatch' || inputs.run_integration_tests == 'true') && github.actor != 'app/dependabot'
      env:
        ESOLOGS_ID: ${{ secrets.ESOLOGS_ID }}
        ESOLOGS_SECRET: ${{ secrets.ESOLOGS_SECRET }}
      run: |
        echo "Starting integration tests..."
        pytest tests/integration/ -v --tb=short

    - name: Run sanity tests
      if: (github.event_name != 'workflow_dispatch' || inputs.run_integration_tests == 'true') && github.actor != 'app/dependabot'
      env:
        ESOLOGS_ID: ${{ secrets.ESOLOGS_ID }}
        ESOLOGS_SECRET: ${{ secrets.ESOLOGS_SECRET }}
      run: |
        echo "Starting sanity tests..."
        pytest tests/sanity/ -v --tb=short

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security checks
      run: |
        echo "Running bandit security scan..."
        bandit -r esologs/ -f json -o bandit-report.json || echo "Bandit completed with warnings"
        echo "Running safety dependency check..."
        safety check --json --output safety-report.json || echo "Safety completed with warnings"
        ls -la *.json

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install sphinx sphinx-rtd-theme

    - name: Build documentation
      run: |
        # Add documentation build commands here when ready
        echo "Documentation build placeholder"

    - name: Deploy to GitHub Pages
      if: success()
      run: |
        echo "Documentation deployment placeholder"
