#!/usr/bin/env python3
"""
Post-processing script for ariadne-codegen output.
Moves generated files to the _generated subdirectory.
"""
import shutil
from pathlib import Path


def move_generated_files() -> None:
    """Move generated files to _generated subdirectory."""
    source_dir = Path("esologs")
    target_dir = Path("esologs/_generated")

    # Files to move (generated by ariadne-codegen)
    generated_files = [
        "async_base_client.py",
        "base_model.py",
        "enums.py",
        "exceptions.py",
        "input_types.py",
    ]

    # Check if ariadne-codegen generated a client.py (it shouldn't be in our case)
    # If it did, move it to generated_client.py to preserve our custom client.py
    if (source_dir / "client.py").exists():
        # Check if it's the generated one by looking for specific patterns
        with open(source_dir / "client.py") as f:
            content = f.read()

        # If it contains imports from relative paths (generated code pattern)
        if "from .async_base_client import AsyncBaseClient" in content:
            print("Found generated client.py, moving to _generated/generated_client.py")
            shutil.move(
                str(source_dir / "client.py"), str(target_dir / "generated_client.py")
            )

    # Also move all get_*.py files
    for file in source_dir.glob("get_*.py"):
        generated_files.append(file.name)

    # Move files
    moved_count = 0
    for filename in generated_files:
        source_file = source_dir / filename
        target_file = target_dir / filename

        if source_file.exists():
            print(f"Moving {filename} to _generated/")
            shutil.move(str(source_file), str(target_file))
            moved_count += 1

    print(f"\nMoved {moved_count} files to _generated/")

    # Update imports in generated files
    print("\nUpdating imports in generated files...")
    for file_path in target_dir.glob("*.py"):
        if file_path.name == "__init__.py":
            continue

        with open(file_path) as f:
            content = f.read()

        # Update relative imports to work from _generated subdirectory
        # This is a simplified version - might need refinement
        updated = False

        # Check if file has local imports that need updating
        if "from ." in content and file_path.name.startswith("get_"):
            # These files import from base_model, enums, etc.
            # No changes needed since they're all in same directory
            pass

        if updated:
            with open(file_path, "w") as f:
                f.write(content)
            print(f"Updated imports in {file_path.name}")


if __name__ == "__main__":
    move_generated_files()
