# Generated by ariadne-codegen
# Source: queries.graphql

from typing import Any, Dict, Optional, Union

from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .get_abilities import GetAbilities
from .get_ability import GetAbility
from .get_character_by_id import GetCharacterById
from .get_character_encounter_ranking import GetCharacterEncounterRanking
from .get_character_reports import GetCharacterReports
from .get_class import GetClass
from .get_classes import GetClasses
from .get_encounters_by_zone import GetEncountersByZone
from .get_factions import GetFactions
from .get_guild_by_id import GetGuildById
from .get_item import GetItem
from .get_item_set import GetItemSet
from .get_item_sets import GetItemSets
from .get_items import GetItems
from .get_map import GetMap
from .get_maps import GetMaps
from .get_np_cs import GetNPCs
from .get_npc import GetNPC
from .get_regions import GetRegions
from .get_report_by_code import GetReportByCode
from .get_world_data import GetWorldData
from .get_zones import GetZones


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def get_ability(self, id: int, **kwargs: Any) -> GetAbility:
        query = gql(
            """
            query getAbility($id: Int!) {
              gameData {
                ability(id: $id) {
                  id
                  name
                  icon
                  description
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="getAbility", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetAbility.model_validate(data)

    async def get_abilities(
        self,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetAbilities:
        query = gql(
            """
            query getAbilities($limit: Int, $page: Int) {
              gameData {
                abilities(limit: $limit, page: $page) {
                  data {
                    id
                    name
                    icon
                  }
                  total
                  per_page
                  current_page
                  from
                  to
                  last_page
                  has_more_pages
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"limit": limit, "page": page}
        response = await self.execute(
            query=query, operation_name="getAbilities", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetAbilities.model_validate(data)

    async def get_class(self, id: int, **kwargs: Any) -> GetClass:
        query = gql(
            """
            query getClass($id: Int!) {
              gameData {
                class(id: $id) {
                  id
                  name
                  slug
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="getClass", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetClass.model_validate(data)

    async def get_world_data(self, **kwargs: Any) -> GetWorldData:
        query = gql(
            """
            query getWorldData {
              worldData {
                encounter {
                  id
                  name
                }
                expansion {
                  id
                  name
                }
                expansions {
                  id
                  name
                }
                region {
                  id
                  name
                }
                regions {
                  id
                  name
                }
                server {
                  id
                  name
                }
                subregion {
                  id
                  name
                }
                zone {
                  id
                  name
                  frozen
                  expansion {
                    id
                    name
                  }
                  difficulties {
                    id
                    name
                    sizes
                  }
                  encounters {
                    id
                    name
                  }
                  partitions {
                    id
                    name
                    compactName
                    default
                  }
                }
                zones {
                  id
                  name
                  frozen
                  expansion {
                    id
                    name
                  }
                  brackets {
                    min
                    max
                    bucket
                    type
                  }
                  difficulties {
                    id
                    name
                    sizes
                  }
                  encounters {
                    id
                    name
                  }
                  partitions {
                    id
                    name
                    compactName
                    default
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="getWorldData", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetWorldData.model_validate(data)

    async def get_character_by_id(self, id: int, **kwargs: Any) -> GetCharacterById:
        query = gql(
            """
            query getCharacterById($id: Int!) {
              characterData {
                character(id: $id) {
                  id
                  name
                  classID
                  raceID
                  guildRank
                  hidden
                  server {
                    name
                    region {
                      name
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query,
            operation_name="getCharacterById",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetCharacterById.model_validate(data)

    async def get_character_reports(
        self,
        character_id: int,
        limit: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetCharacterReports:
        query = gql(
            """
            query getCharacterReports($characterId: Int!, $limit: Int = 10) {
              characterData {
                character(id: $characterId) {
                  recentReports(limit: $limit) {
                    data {
                      code
                      startTime
                      endTime
                      zone {
                        name
                      }
                    }
                    total
                    per_page
                    current_page
                    from
                    to
                    last_page
                    has_more_pages
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"characterId": character_id, "limit": limit}
        response = await self.execute(
            query=query,
            operation_name="getCharacterReports",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetCharacterReports.model_validate(data)

    async def get_guild_by_id(self, guild_id: int, **kwargs: Any) -> GetGuildById:
        query = gql(
            """
            query getGuildById($guildId: Int!) {
              guildData {
                guild(id: $guildId) {
                  id
                  name
                  description
                  faction {
                    name
                  }
                  server {
                    name
                    region {
                      name
                    }
                  }
                  tags {
                    id
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"guildId": guild_id}
        response = await self.execute(
            query=query, operation_name="getGuildById", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetGuildById.model_validate(data)

    async def get_encounters_by_zone(
        self, zone_id: int, **kwargs: Any
    ) -> GetEncountersByZone:
        query = gql(
            """
            query getEncountersByZone($zoneId: Int!) {
              worldData {
                zone(id: $zoneId) {
                  id
                  name
                  encounters {
                    id
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"zoneId": zone_id}
        response = await self.execute(
            query=query,
            operation_name="getEncountersByZone",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetEncountersByZone.model_validate(data)

    async def get_regions(self, **kwargs: Any) -> GetRegions:
        query = gql(
            """
            query getRegions {
              worldData {
                regions {
                  id
                  name
                  subregions {
                    id
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="getRegions", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetRegions.model_validate(data)

    async def get_report_by_code(self, code: str, **kwargs: Any) -> GetReportByCode:
        query = gql(
            """
            query getReportByCode($code: String!) {
              reportData {
                report(code: $code) {
                  code
                  startTime
                  endTime
                  title
                  visibility
                  zone {
                    name
                  }
                  fights {
                    id
                    name
                    difficulty
                    startTime
                    endTime
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"code": code}
        response = await self.execute(
            query=query, operation_name="getReportByCode", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetReportByCode.model_validate(data)

    async def get_character_encounter_ranking(
        self, character_id: int, encounter_id: int, **kwargs: Any
    ) -> GetCharacterEncounterRanking:
        query = gql(
            """
            query getCharacterEncounterRanking($characterId: Int!, $encounterId: Int!) {
              characterData {
                character(id: $characterId) {
                  encounterRankings(encounterID: $encounterId)
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "characterId": character_id,
            "encounterId": encounter_id,
        }
        response = await self.execute(
            query=query,
            operation_name="getCharacterEncounterRanking",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetCharacterEncounterRanking.model_validate(data)

    async def get_zones(self, **kwargs: Any) -> GetZones:
        query = gql(
            """
            query getZones {
              worldData {
                zones {
                  id
                  name
                  frozen
                  brackets {
                    type
                    min
                    max
                    bucket
                  }
                  encounters {
                    id
                    name
                  }
                  difficulties {
                    id
                    name
                    sizes
                  }
                  expansion {
                    id
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="getZones", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetZones.model_validate(data)

    async def get_classes(
        self,
        faction_id: Union[Optional[int], UnsetType] = UNSET,
        zone_id: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetClasses:
        query = gql(
            """
            query getClasses($faction_id: Int, $zone_id: Int) {
              gameData {
                classes(faction_id: $faction_id, zone_id: $zone_id) {
                  id
                  name
                  slug
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"faction_id": faction_id, "zone_id": zone_id}
        response = await self.execute(
            query=query, operation_name="getClasses", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetClasses.model_validate(data)

    async def get_factions(self, **kwargs: Any) -> GetFactions:
        query = gql(
            """
            query getFactions {
              gameData {
                factions {
                  id
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="getFactions", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetFactions.model_validate(data)

    async def get_item(self, id: int, **kwargs: Any) -> GetItem:
        query = gql(
            """
            query getItem($id: Int!) {
              gameData {
                item(id: $id) {
                  id
                  name
                  icon
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="getItem", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetItem.model_validate(data)

    async def get_item_set(self, id: int, **kwargs: Any) -> GetItemSet:
        query = gql(
            """
            query getItemSet($id: Int!) {
              gameData {
                item_set(id: $id) {
                  id
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="getItemSet", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetItemSet.model_validate(data)

    async def get_item_sets(
        self,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetItemSets:
        query = gql(
            """
            query getItemSets($limit: Int, $page: Int) {
              gameData {
                item_sets(limit: $limit, page: $page) {
                  data {
                    id
                    name
                  }
                  total
                  per_page
                  current_page
                  from
                  to
                  last_page
                  has_more_pages
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"limit": limit, "page": page}
        response = await self.execute(
            query=query, operation_name="getItemSets", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetItemSets.model_validate(data)

    async def get_items(
        self,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetItems:
        query = gql(
            """
            query getItems($limit: Int, $page: Int) {
              gameData {
                items(limit: $limit, page: $page) {
                  data {
                    id
                    name
                    icon
                  }
                  total
                  per_page
                  current_page
                  from
                  to
                  last_page
                  has_more_pages
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"limit": limit, "page": page}
        response = await self.execute(
            query=query, operation_name="getItems", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetItems.model_validate(data)

    async def get_map(self, id: int, **kwargs: Any) -> GetMap:
        query = gql(
            """
            query getMap($id: Int!) {
              gameData {
                map(id: $id) {
                  id
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="getMap", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetMap.model_validate(data)

    async def get_maps(
        self,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetMaps:
        query = gql(
            """
            query getMaps($limit: Int, $page: Int) {
              gameData {
                maps(limit: $limit, page: $page) {
                  data {
                    id
                    name
                  }
                  total
                  per_page
                  current_page
                  from
                  to
                  last_page
                  has_more_pages
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"limit": limit, "page": page}
        response = await self.execute(
            query=query, operation_name="getMaps", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetMaps.model_validate(data)

    async def get_npc(self, id: int, **kwargs: Any) -> GetNPC:
        query = gql(
            """
            query getNPC($id: Int!) {
              gameData {
                npc(id: $id) {
                  id
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="getNPC", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetNPC.model_validate(data)

    async def get_np_cs(
        self,
        limit: Union[Optional[int], UnsetType] = UNSET,
        page: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetNPCs:
        query = gql(
            """
            query getNPCs($limit: Int, $page: Int) {
              gameData {
                npcs(limit: $limit, page: $page) {
                  data {
                    id
                    name
                  }
                  total
                  per_page
                  current_page
                  from
                  to
                  last_page
                  has_more_pages
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"limit": limit, "page": page}
        response = await self.execute(
            query=query, operation_name="getNPCs", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetNPCs.model_validate(data)
